#pragma once
#include <string>

//////////////////////////////////////////////////////
///@brief Define the type of a cell.
///
//////////////////////////////////////////////////////
enum class Type {
    EMPTY,
    INT,
    DOUBLE,
    STRING,
    FORMULA
};



//////////////////////////////////////////////////////
///@brief Abstract class. Defines the basic methods a cell must have.
//////////////////////////////////////////////////////
class Cell {

public:

    //////////////////////////////////////////////////////
    ///@brief Tells the type of a cell.
    //////////////////////////////////////////////////////
    virtual Type getType() = 0;


    //////////////////////////////////////////////////////
    ///@brief Get the spacing needed to print the cell.
    ///
    ///@return The spacing needed to print the cell. 
    //////////////////////////////////////////////////////
    virtual size_t getSpacing() = 0;


    //////////////////////////////////////////////////////
    ///@brief Get the cell's s_value.
    ///
    ///@return The value of the cell in form for read/write from/to file.  
    //////////////////////////////////////////////////////
    virtual std::string getS_Value () const = 0;


    //////////////////////////////////////////////////////
    ///@brief Get the number value of the cell.
    ///
    ///@return The value of the cell, cenverted to double.
    ///        Non-numeric string value equals 0.  
    //////////////////////////////////////////////////////
    virtual double getNum_Value() = 0;


    //////////////////////////////////////////////////////
    ///@brief Print the cell value.
    ///
    //////////////////////////////////////////////////////
    virtual void print() const = 0;


    //////////////////////////////////////////////////////
    ///@brief Destroy the Cell object.
    ///
    //////////////////////////////////////////////////////
    virtual ~Cell () = default;

};



//////////////////////////////////////////////////////
///@brief Cell with value of type int.
///
//////////////////////////////////////////////////////
class intCell : public Cell {

private:
    //////////////////////////////////////////////////////
    ///@brief Cell's value.
    ///
    //////////////////////////////////////////////////////
    int value;

    //////////////////////////////////////////////////////
    ///@brief The value of the intCell in form for read/write from/to file.
    ///
    //////////////////////////////////////////////////////
    std::string s_value; 

public:

    //////////////////////////////////////////////////////
    ///@brief Construct a new Cell with value of type int.
    ///
    ///@param value Value of the intCell - random variable of type int.
    //////////////////////////////////////////////////////
    intCell(int value);


    //////////////////////////////////////////////////////
    ///@brief Get the Type of the intCell.
    ///
    ///@return Type::INT 
    //////////////////////////////////////////////////////
    Type getType() override;


    //////////////////////////////////////////////////////
    ///@brief Get the Value of the intCell.
    ///
    ///@return Value of the intCell.
    //////////////////////////////////////////////////////
    int getValue() const;


    //////////////////////////////////////////////////////
    ///@brief Get the s_value of the intCell.
    ///
    ///@return The value of the cell in form for read/write from/to file. 
    //////////////////////////////////////////////////////
    std::string getS_Value () const override;


    //////////////////////////////////////////////////////
    ///@brief Get the number value of the intCell.
    ///
    ///@return The value of the cell, converted to double.          
    //////////////////////////////////////////////////////
    double getNum_Value() override; 


    //////////////////////////////////////////////////////
    ///@brief Print the intCell value.
    ///
    //////////////////////////////////////////////////////
    void print() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the spacing needed to print the intCell.
    ///
    ///@return The spacing needed to print the intCell value. 
    //////////////////////////////////////////////////////
    size_t getSpacing() override;

};



//////////////////////////////////////////////////////
///@brief Cell with value of type double.
///
//////////////////////////////////////////////////////
class doubleCell : public Cell {

private:

    //////////////////////////////////////////////////////
    ///@brief Cell's value.
    ///
    //////////////////////////////////////////////////////
    double value;

    //////////////////////////////////////////////////////
    ///@brief The value of the doubleCell in form for read/write from/to file.
    ///
    //////////////////////////////////////////////////////
    std::string s_value;

public:

    //////////////////////////////////////////////////////
    ///@brief Construct a new Cell with value of type double.
    ///
    ///@param value Value of the doubleCell - random variable of type double.
    //////////////////////////////////////////////////////
    doubleCell (double value);


    //////////////////////////////////////////////////////
    ///@brief Get the Type of the doubleCell.
    ///
    ///@return Type::DOUBLE
    //////////////////////////////////////////////////////
    Type getType() override;


    //////////////////////////////////////////////////////
    ///@brief Get the Value of the doubleCell.
    ///
    ///@return Value of the doubleCell.
    //////////////////////////////////////////////////////
    double getValue() const;


    //////////////////////////////////////////////////////
    ///@brief Get the s_value of the doubleCell.
    ///
    ///@return The value of the cell in form for read/write from/to file. 
    //////////////////////////////////////////////////////
    std::string getS_Value() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the number value of the doubleCell.
    ///
    ///@return The value of the cell.          
    //////////////////////////////////////////////////////
    double getNum_Value() override;


    //////////////////////////////////////////////////////
    ///@brief Print the doubleCell value.
    ///
    //////////////////////////////////////////////////////
    void print() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the spacing needed to print the doubleCell.
    ///
    ///@return The spacing needed to print the doubleCell value. 
    //////////////////////////////////////////////////////
    size_t getSpacing() override;

};



//////////////////////////////////////////////////////
///@brief Cell with value of type std::string.
///
//////////////////////////////////////////////////////
class stringCell : public Cell {

private:

    //////////////////////////////////////////////////////
    ///@brief Cell's value.
    ///
    //////////////////////////////////////////////////////
    std::string value;

    //////////////////////////////////////////////////////
    ///@brief The value of the stringCell in form for read/write from/to file.
    ///       Every \ and " symbol are displayed by \\ or \" respectively.
    //////////////////////////////////////////////////////
    std::string s_value; //the value in C/C++ string form

public:

    //////////////////////////////////////////////////////
    ///@brief Construct a new Cell with value of type string.
    ///
    ///@param s_value S_Value of the stringCell - rightly constructed string.
    //////////////////////////////////////////////////////
    stringCell (const std::string& s_value);


    //////////////////////////////////////////////////////
    ///@brief Get the Type of the stringCell.
    ///
    ///@return Type::STRING 
    //////////////////////////////////////////////////////
    Type getType() override;


    //////////////////////////////////////////////////////
    ///@brief Get the Value of the stringCell.
    ///
    ///@return Value of the stringCell.
    //////////////////////////////////////////////////////
    const std::string& getValue() const;


    //////////////////////////////////////////////////////
    ///@brief Get the s_value of the stringCell.
    ///
    ///@return The value of the cell in form for read/write from/to file. 
    //////////////////////////////////////////////////////
    std::string getS_Value() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the number value of the stringCell.
    ///
    ///@return std::stod(value) or 0 if std::stod throws an exception.          
    //////////////////////////////////////////////////////
    double getNum_Value() override;


    //////////////////////////////////////////////////////
    ///@brief Print the stringCell value.
    ///
    //////////////////////////////////////////////////////
    void print() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the spacing needed to print the stringCell.
    ///
    ///@return The spacing needed to print the stringCell value. 
    //////////////////////////////////////////////////////
    size_t getSpacing() override;

};



//////////////////////////////////////////////////////
///@brief Cell with no value.
///
//////////////////////////////////////////////////////
class emptyCell : public Cell {


public:

    //////////////////////////////////////////////////////
    ///@brief Construct a new empty Cell. Default.
    ///
    //////////////////////////////////////////////////////
    emptyCell() = default;


    //////////////////////////////////////////////////////
    ///@brief Get the Type of the emptyCell.
    ///
    ///@return Type::EMPTY 
    //////////////////////////////////////////////////////
    Type getType() override;


    //////////////////////////////////////////////////////
    ///@brief Get the s_value of the emptyCell.
    ///
    ///@return Empty string. 
    //////////////////////////////////////////////////////
    std::string getS_Value() const override;


    //////////////////////////////////////////////////////
    ///@brief Get the number value of the emptyCell.
    ///
    ///@return 0          
    //////////////////////////////////////////////////////
    double getNum_Value() override;



    //////////////////////////////////////////////////////
    ///@brief Does nothing.
    ///
    //////////////////////////////////////////////////////
    void print() const override;
    
    
    //////////////////////////////////////////////////////
    ///@brief Get the spacing needed to print the emptyCell value.
    ///
    ///@return 0
    //////////////////////////////////////////////////////
    size_t getSpacing() override;

};




